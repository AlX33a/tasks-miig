from db_log import Database
import telebot
import datetime
import requests
from bs4 import BeautifulSoup
from keys import bot_token, WET_KEY
from telebot import types
from pycoingecko import CoinGeckoAPI

#Initilizing
bot = telebot.TeleBot(bot_token)

class Tools:
    global n


    def first_panel(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m1 = types.KeyboardButton('set my news')
        m2 = types.KeyboardButton('my news')
        m3 = types.KeyboardButton('services')
        return markup.add(m1, m2, m3)

    def second_panel(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m5 = types.KeyboardButton('üå§ –ü–æ–≥–æ–¥–∞ üå©')
        m6 = types.KeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–∏ üì¶')
        m7 = types.KeyboardButton('üí∞ –ö—Ä–∏–ø—Ç–æ ü™ô')
        m8 = types.KeyboardButton('‚óÄÔ∏è')
        return markup.add(m5, m6, m7, m8)

    def set_panel(message, user_id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if Database.service_check(user_id)[0:1] == '1':
            m9 = types.KeyboardButton('üå§ –ü–æ–≥–æ–¥–∞ üå© ‚úÖ')
        else: m9 = types.KeyboardButton('üå§ –ü–æ–≥–æ–¥–∞ üå© ‚ûï')
        if Database.service_check(user_id)[1:2] == '1':
            m10 = types.KeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–∏ üì¶ ‚úÖ')
        else: m10 = types.KeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–∏ üì¶ ‚ûï')
        if Database.service_check(user_id)[2:3] == '1':
            m11 = types.KeyboardButton('üí∞ –ö—Ä–∏–ø—Ç–æ ü™ô ‚úÖ')
        else: m11 = types.KeyboardButton('üí∞ –ö—Ä–∏–ø—Ç–æ ü™ô ‚ûï')
        m12 = types.KeyboardButton('‚óÄÔ∏è')
        return markup.add(m9, m10, m11, m12)

    def news_set_first(message, user_id):
        markup = Tools.set_panel(message, user_id)
        bot.send_message(message.chat.id, '–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ my news.', reply_markup=markup)

    def news_set(message, user_id):
        markup = Tools.set_panel(message, user_id)
        bot.send_message(message.chat.id, '–°–¥–µ–ª–∞–Ω–æ, —á—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=markup)

    def first_start_message(message):
        markup = Tools.first_panel(message)
        bot.send_message(message.chat.id, f'''–ü—Ä–∏–≤–µ—Ç!\n–Ø –≤–∏–∂—É —Ç—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π.\n–ú–µ–Ω—è –∑–æ–≤—É—Ç Miig bot!\n–°–æ–≤–µ—Ç—É—é —Ç–µ–±–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –º–æ–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ /help 
        ''', reply_markup=markup)

    def help_message(message):
        markup = Tools.first_panel(message)
        bot.send_message(message.chat.id, f'''–£ –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ set my news –∏ –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –ø–æ –∫–Ω–æ–ø–∫–µ my news, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏. –¢–∞–∫–∂–µ –ø–æ –∫–Ω–æ–ø–∫–µ services —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º.
        ''', reply_markup=markup)

    def start_message(message):
        markup = Tools.first_panel(message)
        bot.send_message(message.chat.id, f'''–ò —Ç–µ–±–µ –¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –ª—é–±–∏—Ç–µ–ª—å –Ω–æ–≤–æ—Å—Ç–µ–π!\n–ï—Å–ª–∏ –∑–∞–±—ã–ª –ø—Ä–æ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∏—à–∏ /help
        ''', reply_markup=markup)

    def base_message(message):
        markup = Tools.first_panel(message)
        bot.send_message(message.chat.id, f'''–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É.
        ''', reply_markup=markup)

    def services(message):
        markup = Tools.second_panel(message)
        bot.send_message(message.chat.id,'–ó–¥–µ—Å—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–æ–≤–æ—Å—Ç–µ–π.', reply_markup=markup)

    def time_converter(time):
            return datetime.datetime.fromtimestamp(time)

    def my_news_message(message, user_id):
        k = 0
        if Database.service_check(user_id)[0:1] == '1':
            Tools.weather(message)
            k  += 1
        if Database.service_check(user_id)[1:2] == '1':
            Tools.news(message)
            k += 1
        if Database.service_check(user_id)[2:3] == '1':
            Tools.cripto(message)
            k += 1
        else: 
            if k == 0 : bot.send_message(message.chat.id,'–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ :(')
            else: pass

    def eror_message(message):
        bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –ø–∞–Ω–µ–ª–∏.')

    def weather(message):
        req = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q=Moscow&appid={WET_KEY}&units=metric"
        )
        data = req.json()
        code_to_smile = {
            "Clear": "–Ø—Å–Ω–æ ‚òÄ",
            "Clouds": "–û–±–ª–∞—á–Ω–æ ‚òÅ",
            "Rain": "–î–æ–∂–¥—å ‚òî",
            "Drizzle": "–î–æ–∂–¥—å ‚òî",
            "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚ö°",
            "Snow": "–°–Ω–µ–≥ üå®",
            "Mist": "–¢—É–º–∞–Ω üå´"
        }
        weather_description = data["weather"][0]["main"]

        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else: wd = "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ üòë\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∏–∂–µ :3"

        temp = data['main']['temp']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        wind_speed = data['wind']['speed']
        sunrise = str(Tools.time_converter(data['sys']['sunrise']))[11:]
        sunset = str(Tools.time_converter(data['sys']['sunset']))[11:]
        daylight_hours = Tools.time_converter(data['sys']['sunset']) - Tools.time_converter(data['sys']['sunrise'])

        bot.reply_to(message,
                     f'‚ñ∫ {datetime.datetime.now().strftime("%Y/%m/%d %H:%M")} ‚óÑ\n'
                     f'üåÄ –ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ —Å–µ–π—á–∞—Å: {wd}\n'
                     f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—Ä–∞: {temp}–°¬∞\n'
                     f'üí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
                     f'üí™ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º. —Ä—Ç. —Å—Ç.\n'
                     f'üöÄ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n'
                     f'üåö –í—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞: {sunrise}\n'
                     f'üåù –í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞: {sunset}\n'
                     f'üïí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {daylight_hours}\n'
                     )

    def news(message):
        URL = 'https://ria.ru/world/'
        HEADERS = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Safari/537.36'}
        response = requests.get(URL, headers=HEADERS)
        soup = BeautifulSoup(response.content, 'html.parser')
        texts = soup.findAll('a', 'list-item__title')
        for i in range(len(texts[:5])):
            txt = f'{i + 1}) {texts[i].text}'
            bot.send_message(message.chat.id, f'<a href="{texts[i]["href"]}">{txt}</a>', parse_mode='html')
    
    def cripto(message):
        api = CoinGeckoAPI()
        cript = api.get_price(ids=["bitcoin", "ethereum", "cardano", "solana", "polkadot"], vs_currencies="rub")
        bot.reply_to(message,
                     f'‚ñ∫ {datetime.datetime.now().strftime("%Y/%m/%d %H:%M")} ‚óÑ\n'
                     f'üí∏ –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n'
                     f'üí∂ –ë–∏—Ç–∫–æ–∏–Ω: {cript["bitcoin"]["rub"]} —Ä—É–±.\n'
                     f'üíµ –≠—Ñ–∏—Ä–∏—É–º: {cript["ethereum"]["rub"]} —Ä—É–±.\n'
                     f'üí∑ Solana: {cript["cardano"]["rub"]} —Ä—É–±.\n'
                     f'üíµ Polkadot: {cript["solana"]["rub"]} —Ä—É–±.\n'
                     f'üí¥ Cardano: {cript["polkadot"]["rub"]} —Ä—É–±.\n'
                     )